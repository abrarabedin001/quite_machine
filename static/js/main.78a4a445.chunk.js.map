{"version":3,"sources":["reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","quote","author","store","createStore","state","action","type","App","props","this","fetchQuote","style","app","id","quotePaper","quoteText","icon","faQuoteLeft","ptag","buttonDiv","tweeterDiv","class","href","indiButt","faTwitter","size","onClick","get_quote_of_the_day","bind","byLine","Component","connect","dispatch","fetch","then","res","json","data","obj","character","color","background","border","padding","margin","borderRadius","display","paddingBottom","justifyContent","textAlign","boxSizing","paddingTop","backgroundColor","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gTAqBMA,EAAe,CACjBC,MAAO,GACPC,OAAQ,IAeL,IAAMC,EAAQC,aAVd,WAAiD,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCACnD,OAAQA,EAAOC,MACX,IA1BmB,cA2Bf,MAAO,CAACN,MAAOK,EAAOL,MAAOC,OAAQI,EAAOJ,QAChD,QACI,OAAOG,M,6BClBbG,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDJ,MAAQ,CACTJ,MAAO,GACPC,OAAQ,IAJG,E,iEAefQ,KAAKD,MAAME,e,6CAYXD,KAAKD,MAAME,e,+BAGX,OAEQ,yBAAKC,MAAOC,GACR,yBAAKC,GAAG,aAAaF,MAAOG,GAExB,wBAAID,GAAG,YAAYF,MAAOI,GACtB,kBAAC,IAAD,CAAiBC,KAAMC,MAD3B,IAC2CR,KAAKD,MAAMR,OAGtD,yBAAKa,GAAG,WAEJ,uBAAGF,MAAOO,GAAV,KAAmBT,KAAKD,MAAMP,SAGlC,yBAAKY,GAAG,YAAYF,MAAOQ,GACvB,yBAAKN,GAAG,aAAaF,MAAOS,GACxB,uBAAGC,MAAM,uBAAuBC,KAAK,oCACjC,4BAAQX,MAAOY,GAAU,kBAAC,IAAD,CAAiBP,KAAMQ,IAAWC,KAAK,UAKxE,4BACId,MAAOY,EACPG,QAASjB,KAERkB,qBACAC,KAAKnB,OALV,eASR,yBAAKI,GAAG,SAASF,MAAOkB,GACpB,+C,GA/DNC,aA2FHC,eAjBO,SAAA3B,GAAK,MAAG,CAC1BJ,MAAMI,EAAMJ,MACZC,OAAOG,EAAMH,WAEU,SAAA+B,GACvB,MAAO,CACHtB,WAAY,kBAAIuB,MAAM,gDACrBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAIC,EAAMD,EAAK,GAGf,OAAQL,EAAS,CAAC1B,KDjGH,cCiGsBN,MAAOsC,EAAItC,MAAOC,OAAQqC,EAAIC,mBAKhER,CAA4CxB,GAEvDsB,EAAS,CACTW,MAAO,SAEPjB,EAAW,CACXiB,MAAO,QACPC,WAAY,qBACZC,OAAQ,OACRC,QAAS,OACTC,OAAQ,MACRC,aAAc,OAEdzB,EAAa,CACb0B,QAAS,gBAGT3B,EAAY,CACZ4B,cAAe,OACfD,QAAS,OACTE,eAAgB,eAChBL,QAAS,QAGTzB,EAAO,CACP+B,UAAW,QAEXN,QAAS,SACTC,OAAQ,OAGRhC,EAAM,CACNqC,UAAW,SACXL,OAAQ,MACRD,QAAS,MACTO,UAAW,cAKXnC,EAAY,CACZ4B,QAAS,uBAGT7B,EAAa,CACb0B,MAAO,UACPW,WAAY,MACZP,OAAQ,iBACRQ,gBAAiB,QACjBC,MAAO,QAEPR,aAAc,OCjJES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAU1D,MAAOA,GACf,kBAAC,EAAD,OAGF2D,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78a4a445.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\n\r\n\r\n///ction type\r\nexport const FETCH_QUOTE = \"FETCH_QUOTE\";\r\n\r\n\r\n///Action\r\n// export const fetchQuote = () => {\r\n//     fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//             let obj = data[0]\r\n//             // console.log(obj.author) return (this.setState({quote: obj.quote, author:\r\n//             // obj.character}))\r\n//             return (dispatch({type: FETCH_QUOTE, quote: obj.quote, author: obj.character}))\r\n//         })\r\n// }\r\n\r\n\r\n/// State initialization\r\nconst initialState = {\r\n    quote: '',\r\n    author: ''\r\n}\r\n\r\n\r\n/// Reducer\r\nexport function reducer (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_QUOTE:\r\n            return {quote: action.quote, author: action.author}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const store = createStore(reducer)\r\n","import React from 'react';\n\nimport './App.css';\nimport store from './store.js'\nimport {FETCH_QUOTE} from './reducers'\n\nimport {Component} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faQuoteLeft} from '@fortawesome/free-solid-svg-icons'\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons'\nimport {faTumblr} from '@fortawesome/free-brands-svg-icons'\nimport {TumblrShareButton, TumblrIcon} from \"react-share\"\nimport {connect} from 'react-redux'\n//import {fetchQuote} from './reducers/index.js'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            quote: '',\n            author: ''\n        }\n    }\n    componentWillMount() {\n        // fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n        //     .then(res => res.json())\n        //     .then(data => {\n        //         let obj = data[0]\n        //         //console.log(obj.author)\n        //         return (this.setState({quote: obj.quote, author: obj.character}))\n        //     })\n        this.props.fetchQuote();\n    }\n\n    //// input redux   //// input redux   \n    get_quote_of_the_day() {\n        // fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n        //     .then(res => res.json())\n        //     .then(data => {\n        //         let obj = data[0]\n        //         //console.log(obj.author)\n        //         return (this.setState({quote: obj.quote, author: obj.character}))\n        //     })\n        this.props.fetchQuote();\n    }\n    render() {\n        return (\n            \n                <div style={app}>\n                    <div id='quotePaper' style={quotePaper}>\n\n                        <h2 id='quoteText' style={quoteText}>\n                            <FontAwesomeIcon icon={faQuoteLeft}/> {this.props.quote}\n                        </h2>\n\n                        <div id='quoteId'>\n                            \n                            <p style={ptag}>- {this.props.author}</p>\n                        </div>\n\n                        <div id='buttonDiv' style={buttonDiv}>\n                            <div id='tweeterDiv' style={tweeterDiv}>\n                                <a class=\"twitter-share-button\" href=\"https://twitter.com/intent/tweet\">\n                                    <button style={indiButt}><FontAwesomeIcon icon={faTwitter} size=\"lg\"/></button>\n                                </a>\n\n                            </div>\n\n                            <button\n                                style={indiButt}\n                                onClick={this\n                                 //// input redux   \n                                .get_quote_of_the_day\n                                .bind(this)}>New Quote</button>\n                        </div>\n\n                    </div>\n                    <div id='byLine' style={byLine}>\n                        <p >by - Abrar\n                        </p>\n                    </div>\n\n                </div>\n            \n\n        )\n    }\n}\n\nconst mapStateToProps=state=>({\n    quote:state.quote,\n    author:state.author\n})\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchQuote: ()=>fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n        .then(res => res.json())\n        .then(data => {\n            let obj = data[0]\n            // console.log(obj.author) return (this.setState({quote: obj.quote, author:\n            // obj.character}))\n            return (dispatch({type: FETCH_QUOTE, quote: obj.quote, author: obj.character}))\n        })\n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\nlet byLine = {\n    color: 'white'\n}\nlet indiButt = {\n    color: 'white',\n    background: 'hsl(168, 76%, 36%)',\n    border: \"none\",\n    padding: '13px',\n    margin: '5px',\n    borderRadius: '3px'\n}\nlet tweeterDiv = {\n    display: 'inline-block'\n}\n\nlet buttonDiv = {\n    paddingBottom: '30px',\n    display: 'flex',\n    justifyContent: 'space-around',\n    padding: '15px'\n}\n\nlet ptag = {\n    textAlign: 'right',\n    //float:'right',\n    padding: '0 30px',\n    margin: '0px'\n}\n\nlet app = {\n    textAlign: 'center',\n    margin: '0px',\n    padding: '0px',\n    boxSizing: 'border-box',\n\n    // display:'flex', justifyContent: 'center', alignItems: 'center',\n}\n\nlet quoteText = {\n    padding: '30px 20px 20px 30px'\n}\n\nlet quotePaper = {\n    color: '#16A085',\n    paddingTop: '5px',\n    margin: '90px auto 10px',\n    backgroundColor: 'white',\n    width: '550px',\n    //height:'315px',\n    borderRadius: '9px'\n}\n\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {store} from './reducers/index.js'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}